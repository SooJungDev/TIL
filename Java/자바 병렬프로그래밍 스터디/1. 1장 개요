## 1장 내용
1.1 작업을 동시에 실행하는 일에 대한 간략한 역사
1.2 스레드의 이점
1.3 스레드 사용의 위험성
1.4 스레드는 어디에나

## 1.1 작업을 동시에 실행하는 일에 대한 간략한 역사
초창기에는 컴퓨터에는 운영체제 자체가 없었음 당시 컴퓨터는 처음부터 끝까지 하나의 프로그램을 실행하기만함
해당 프로그램을 실행하기만 했고 해당 프로그램은 컴퓨터 내 모든 자원을 직접 접근할수있었음
- 운영체제 없이 하드웨어 위에서 바로 실행되는 프로그램은 작성하기도 힘듬
- 한번에 프로그램 하나만 실행하느니라 컴퓨터자원 대비 성능은 상당히 비효율적

운영체제는 여러개의 프로그램을 각자의 프로세스 내에서 동시에 실행 할수 있도록 발전
프로세스는 각자가 서로 격리된채로 독립적으로 실행하는 프로그램
운영체제는 프로세스마다 메모리, 파일핸들, 보안 권한등의 자원을 할당
프로세스끼리는 서로 통신 할 수도 있음 소켓, 시그널 핸들러, 공유메모리, 세마포어, 파일등 비교적 큰단위의 다양한 통신 수단 제공

여러 프로그램을 동시에 실행 할 수있는 운영체제를 개발하게 된 몇가지요인은 다음과 같음

- 자원활용: 하나의 프로그램이 기다리는 동안 다른 프로그램을 싱핼 할 수 있도록 지원하는편이 효율적

- 공정성: 여러 사용자와 프로그램이 컴퓨터 내 자원에 대한 동일한 권할을 가질 수 있다 
한번에 프로그램 하나를 끝까지 실행해 종료된 이후에야 다른프로그램을 시작 하는것보다는 더 작은 단위로 컴퓨터를 공유하는 방법이 바람직함

- 편의성: 때론 여러 작업을 전부 처리하는 프로그램 하나를 작성하는것보다 각기 일 하나씩 처리하고 필요할때 프로그램 간에 조율하는 프로그램을 여러개 작성하는 편이 더 쉽고 바람직함 

초기 시분할 시스템에서는 각 프로세스가 가상적인 폰 노이만 컴퓨터 순차적으로 수행
순차적 프로그래밍 모델은 사람이 생각하는 방식과 같아서 직관적이고 자연스러움
대부분 한번에 한가지씩 순서대로 처리함

자원활용, 공정성 , 편의성등 프로세스의 개념을 만들어내게 된것과 같은 같은 동기를 가지고 스레드가 고안됨
스레드로 인해 한 프로세스 안에서 여러개의 프로그램 제어 흐름이 공존 할 수 있음

스레드는 메모리, 파일 핸들과 같이 프로세스에 할당된 자원을 공유한다.
하지만 각 스레드는 각기 별도의 프로그램 카운터, 스택, 지역변수를 갖는다.

또한 프로그램을 스레드로 분리하면 멀티프로세서 시스템에서 자연스럽게 하드웨어 병렬성을 이용 할 수 있다.
즉 한 프로그램내 여러 스레드를 동시에 여러개의 CPU 에 할당해 실행 시킬수 있다.

스레드를 가벼운 프로세스라고 부르기도 함
현대 운영체제 대부분은 프로세스가 아니라 스레드를 기본단위로 CPU 자원의 스케줄을 정함
의도적으로 조율하지 않는 이상 하나의 스레드는 다른 스레드와 상관없이 비동기적으로 실행됨

스레드는 자신이 포함된 프로세스 메모리 주소 공간을 공유하기떄문에 한 프로세스 내 모든 스레드는 같은 변수에 접근하고 같은 힙에 객체를 할당한다.
이 때문에 프로세스 때 보다 더 세밀한 단위로 데이터 공유 가능함
공유 된 데이터에 접근하는 과정을 적절하게 동기화 하지 않으면 다른 스레드가 사용중인 변수를 순간적으로 수정해서 예상치 못한 결과를 얻을 수 있다.

## 1.2 스레드의 이점
- 스레드를 제대로 사용하면 개발 및 유지 보수 비용 줄임 
- 복잡한 애플리케이션의 성능 향상
- 비동기적인 일 흐름을 거의 순차적으로 변경할 수있어 사람이 일하고 상호작용하는 방식을 모델링 하기 쉬어짐
- 서버 애플리케이션에 자원 활용도와 처리율을 높이는데 유용함
- JVM을 더 단순하게 구현 할 수 있도록 도와줌

멀티프로세서 활용
- 프로세서 스케줄링의 기본단위는 스레드이기 떄문에 스레드 하나로 동작하는 프로그램은 한번에 최대 하나의 프로세서만 사용한다.




## 스터디 후 느낀점


## 참고
책 자바 병렬 프로그래밍 1장 