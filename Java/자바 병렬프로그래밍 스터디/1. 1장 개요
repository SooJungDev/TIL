## 1장 내용
1.1 작업을 동시에 실행하는 일에 대한 간략한 역사
1.2 스레드의 이점
1.3 스레드 사용의 위험성
1.4 스레드는 어디에나

## 1.1 작업을 동시에 실행하는 일에 대한 간략한 역사
초창기에는 컴퓨터에는 운영체제 자체가 없었음 당시 컴퓨터는 처음부터 끝까지 하나의 프로그램을 실행하기만함
해당 프로그램을 실행하기만 했고 해당 프로그램은 컴퓨터 내 모든 자원을 직접 접근할수있었음
- 운영체제 없이 하드웨어 위에서 바로 실행되는 프로그램은 작성하기도 힘듬
- 한번에 프로그램 하나만 실행하느니라 컴퓨터자원 대비 성능은 상당히 비효율적

운영체제는 여러개의 프로그램을 각자의 프로세스 내에서 동시에 실행 할수 있도록 발전
프로세스는 각자가 서로 격리된채로 독립적으로 실행하는 프로그램
운영체제는 프로세스마다 메모리, 파일핸들, 보안 권한등의 자원을 할당
프로세스끼리는 서로 통신 할 수도 있음 소켓, 시그널 핸들러, 공유메모리, 세마포어, 파일등 비교적 큰단위의 다양한 통신 수단 제공

여러 프로그램을 동시에 실행 할 수있는 운영체제를 개발하게 된 몇가지요인은 다음과 같음

- 자원활용: 하나의 프로그램이 기다리는 동안 다른 프로그램을 싱핼 할 수 있도록 지원하는편이 효율적

- 공정성: 여러 사용자와 프로그램이 컴퓨터 내 자원에 대한 동일한 권할을 가질 수 있다 
한번에 프로그램 하나를 끝까지 실행해 종료된 이후에야 다른프로그램을 시작 하는것보다는 더 작은 단위로 컴퓨터를 공유하는 방법이 바람직함

- 편의성: 때론 여러 작업을 전부 처리하는 프로그램 하나를 작성하는것보다 각기 일 하나씩 처리하고 필요할때 프로그램 간에 조율하는 프로그램을 여러개 작성하는 편이 더 쉽고 바람직함 

초기 시분할 시스템에서는 각 프로세스가 가상적인 폰 노이만 컴퓨터 순차적으로 수행
순차적 프로그래밍 모델은 사람이 생각하는 방식과 같아서 직관적이고 자연스러움
대부분 한번에 한가지씩 순서대로 처리함

자원활용, 공정성 , 편의성등 프로세스의 개념을 만들어내게 된것과 같은 같은 동기를 가지고 스레드가 고안됨
스레드로 인해 한 프로세스 안에서 여러개의 프로그램 제어 흐름이 공존 할 수 있음

스레드는 메모리, 파일 핸들과 같이 프로세스에 할당된 자원을 공유한다.
하지만 각 스레드는 각기 별도의 프로그램 카운터, 스택, 지역변수를 갖는다.

또한 프로그램을 스레드로 분리하면 멀티프로세서 시스템에서 자연스럽게 하드웨어 병렬성을 이용 할 수 있다.
즉 한 프로그램내 여러 스레드를 동시에 여러개의 CPU 에 할당해 실행 시킬수 있다.

스레드를 가벼운 프로세스라고 부르기도 함
현대 운영체제 대부분은 프로세스가 아니라 스레드를 기본단위로 CPU 자원의 스케줄을 정함
의도적으로 조율하지 않는 이상 하나의 스레드는 다른 스레드와 상관없이 비동기적으로 실행됨

스레드는 자신이 포함된 프로세스 메모리 주소 공간을 공유하기떄문에 한 프로세스 내 모든 스레드는 같은 변수에 접근하고 같은 힙에 객체를 할당한다.
이 때문에 프로세스 때 보다 더 세밀한 단위로 데이터 공유 가능함
공유 된 데이터에 접근하는 과정을 적절하게 동기화 하지 않으면 다른 스레드가 사용중인 변수를 순간적으로 수정해서 예상치 못한 결과를 얻을 수 있다.

## 1.2 스레드의 이점
- 스레드를 제대로 사용하면 개발 및 유지 보수 비용 줄임 
- 복잡한 애플리케이션의 성능 향상
- 비동기적인 일 흐름을 거의 순차적으로 변경할 수있어 사람이 일하고 상호작용하는 방식을 모델링 하기 쉬어짐
- 서버 애플리케이션에 자원 활용도와 처리율을 높이는데 유용함
- JVM을 더 단순하게 구현 할 수 있도록 도와줌

멀티프로세서 활용
- 프로세서 스케줄링의 기본단위는 스레드이기 떄문에 스레드 하나로 동작하는 프로그램은 한번에 최대 하나의 프로세서만 사용한다.
- 활성 상태인 스레드가 여러 개인 프로그램은 여러 프로세서에서 동시에 실행 될 수 있음
    - 제대로 설계한다면 멀티스레드 프로그램은 가용한 프로세서 자원을 더 효울적으로 이용해서 처리 속도를 높일 수 있음
- 여러개의 스레드를 사용하면 프로세서가 하나라 해도 처리 속도 높일수 있음

단순한 모델링
- 종류별 작업마다 또는 시뮬레이션 작업의 각 요소마다 스레드를 하나씩 할당하면 마치 순차적인 작업처럼 처리 할 수 있음
- 스케쥴링 교차실행되는 작업, 비동기I/O, 자원대기등의 세부적인 부분과 상위의 비즈니스 로직에 해당하는 부분을 분리 할 수 있다.
- 다시 말해 복잡하면서 비동기적인 작업 흐름을 각기 별도 스레드에서 수행되는 더 단순하고 동기적인 작업 흐름 몇개로 나눌 수 있다.
- 이런 장점servlet 이나 Remote method Invocation 와 같은 프레임워크에서 종종 활용

단순한 비동기 이벤트 
- 여러 클라이언트 프로그램에서 소켓 연결을 받는 서버 애플리케이션의 경우 각 연결마다 스레드를 할당하고 동기 I/O를 사용하도록 하면 개발 작업 쉬워짐

더 빨리 반응하는 사용자 인터페이스

## 1.3 스레드 사용의 위험성
~~~java
@NotThreadSafe
public class UnsafeSequence{
    private int value;

    /** 유일한 값을 리턴 */
    public int getNext(){
        return value++;
    }
}
~~~
- 위에 코드 스레드에 안전하지 않은 일련번호 생성 코드이다!
- 재수없게 동시에 실행되는 경우 양쪽이 같은 값을 가져올 수 있음
- 경쟁조건(Race Condition)이라고 하는 흔한 위험성을 보여주는 예제
- 원래 설계한대로면 계속 다른 값을 리턴해야하지만 어떻게 간섭하느냐에 따라 결곽가 달라짐
- 스레드는 서로 같은 메모리 주소 공간을 공유하고 동시에 실행되기 때문에 다른 스레드가 사용중일지도 모르는 변수를 읽거나 수정 할 수 있음
 - 이점은 편리하지만 위험 할요소임


 위와 같은 코드 아래와 같이 변경하면 스레드 세이프해짐
 ~~~java
@ThreadSafe
public class Sequence{
    @GuardedBy("this") private int value;

    public synchronized int getNext(){
        return value++;
    }
}
~~~
- 자바에서는 공유 변수 접근을 조율하기 위해 동기화 수단 제공됨 
- synchronized 키워드를 넣어서 동기화 된 메소드로 만들면 문제 해결됨

동기화를 하지 않으면 컴파일러, 하드웨어, 실행 환경 각각에서 명령어의 실행시점이나 실행 순서를 자유롭게 조정 할 수있음
레지스터나 다른 스레드에 일시적으로 보이지 않는 프로세서별 캐시 메모리에 변수를 캐시 할 수 도있음
-> 성능을 향상하는데 도움이 되고 바람직하기도 한다
-> 하지만!!! 프로그래머 입장에서는 이런 최적화 작업 댸문에 프로그램에 오류가 발생하지 않도록 스레드간에 데이터가 공우되고 있는지를 명확하게 구분해 줘야하는 부담을 떠안아야함

활동성 위험
- 동시 수행 코드를 개발할 떄는 반드시 스레드 안정성 문제를 신경 써야함
- 프로그램 작성시 단일,멀티 안전성과 정확성을 유지하도록 작성돼야 함
- 멀티 스레드 프로그래밍 시 활동성  장애가 생길 수 있음
    - ex) 데드락(deadlock) 소모상태(starvation) 라이브락(livelock) 
        -> 10장에서 위와같은 문제 해결방법 자세히 다룸

성능위험
- 잘 설계된 병렬 프로그램은 스레드를 사용하여 궁극적으로 성능 향상시킬 수 있음
- 하지만 스레드를 사용하면 실행중에 어느정도 부하가 생김 스레드가 많은 프로그램은 컨텍스트 스위칭이 더 빈번하고 그때문에 상당한 부담
- 실행중인 컨텍스트를 저장하고 다시 읽어 들여야 하며 메모리를 읽고 쓰는데 있어 지역성이 손실되고 스레드를 실행하기도 버거운 CPU 시간을 스케줄링 하는데 소모
- 스레드가 데이터 공유 할때는 동기화 수단도 사용하여함 이러한 동기화는 컴파일러 최적화 방해, 메모리 캐시를 지우거나 무효화 하기도 함
- 그밖에 공유 메모리 버스에 동기화 관련 트래픽 유발 이러한 모든 요인은 측면에서 추가적인 손실 유발
-> 11장에서 이런문제 자세히 다룸

## 1.4 스레드는 어디에나
모든 자바 프로그램은 기본적으로 스레드를 사용한다.
JVM을 시작시키면 main 메소드를 실행 할 주 스레드 뿐만 아니라 가비지 컬렉션이나 객체 종료 object finalization 와 같은 JVM 내부 작업을 담당할 스레드도 생성한다.

프레임웍은 프로그램 컴포넌트를 호출 할 때 프레임 웍 내부의 스레드에서 호출하기 때문에 자동으로 프로그램이 스레드를 활용하는 것과 동일한 효과를 준다
컴포넌트는 언제나 프로그램 내부의 상태에 접근하기 때문에 해당 상태에 접근하는 모든 코드 경로에 해당하는 컴포넌트 역시 스레드 안전해야 한다.

- 타이머
- 서블릿과 JSP
- 원격메소드호출(Remote Method Invocation)
- 스윙과 AWT


## 스터디 후 느낀점


## 참고
책 자바 병렬 프로그래밍 1장 